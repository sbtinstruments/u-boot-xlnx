/* SPDX-License-Identifier: GPL-2.0-or-later */
/*
 *	Copyright (C) 2019 Frederik Peter Aalund <fpa@sbtinstruments.com>
 *
 *	Based on zynq-zed.dts which is:
 *	Copyright (C) 2011 - 2015 Xilinx
 *	Copyright (C) 2012 National Instruments Corp.
 */
/dts-v1/;
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/interrupt-controller/irq.h>
#include "zynq-7000.dtsi"

/ {
	model = "SBT Instruments Green Mango";
	compatible = "sbt,green-mango", "xlnx,zynq-7000";

	aliases {
		i2c0 = &i2c0;
		i2c2 = &i2c2;
		serial0 = &uart1;
		spi0 = &qspi;
		spi1 = &spi1;
		mmc0 = &sdhci1;
	};

	memory@0 {
		device_type = "memory";
		reg = <0x0 0x40000000>;
	};

	chosen {
		bootargs = "";
		stdout-path = "serial0:115200n8";
	};

	usb_phy0: phy0@e0002000 {
		compatible = "ulpi-phy";
		#phy-cells = <0>;
		reg = <0xe0002000 0x1000>;
		view-port = <0x0170>;
		drv-vbus;
	};
};

&clkc {
	ps-clk-frequency = <33333333>;
};

&i2c0 {
	pmic0: da9063@58 {
		compatible = "dlg,da9063";
		reg = <0x58>;
		interrupt-parent = <&gpio0>;
		interrupts = <0 IRQ_TYPE_LEVEL_LOW>;
		interrupt-controller;
		wakeup-source;
		system-power-controller;
		onkey {
			compatible = "dlg,da9063-onkey";
		};
		rtc {
			compatible = "dlg,da9063-rtc";
		};
		wdt {
			compatible = "dlg,da9063-watchdog";
		};
		gpio {
			compatible = "dlg,da9063-gpio";
			gpio-controller;
			#gpio-cells = <2>;
		};
		regulators {
			reg_zynq_ps_pl: bcores-merged {
				regulator-name = "reg_zynq_ps_pl";
				regulator-min-microvolt = <300000>;
				regulator-max-microvolt = <1570000>;
				regulator-min-microamp = <500000>;
				regulator-max-microamp = <2000000>;
				regulator-boot-on;
				regulator-always-on;
				regulator-state-mem {
					regulator-on-in-suspend;
				};
			};
			reg_mt41k256m16: bpro {
				regulator-name = "reg_mt41k256m16";
				regulator-min-microvolt = <530000>;
				regulator-max-microvolt = <1800000>;
				regulator-min-microamp = <500000>;
				regulator-max-microamp = <2000000>;
				regulator-boot-on;
				regulator-always-on;
				regulator-state-mem {
					regulator-on-in-suspend;
				};
			};
			reg_1v8: bmem {
				regulator-name = "reg_1v8";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <3340000>;
				regulator-min-microamp = <1500000>;
				regulator-max-microamp = <3000000>;
				regulator-boot-on;
				regulator-always-on;
				regulator-state-mem {
					regulator-on-in-suspend;
				};
			};
			reg_3v3: bio {
				regulator-name = "reg_3v3";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <3340000>;
				regulator-min-microamp = <1500000>;
				regulator-max-microamp = <3000000>;
				regulator-boot-on;
				regulator-always-on;
				regulator-state-mem {
					regulator-on-in-suspend;
				};
			};
			reg_unused_1v2: bperi {
				regulator-name = "reg_unused_1v2";
				regulator-min-microvolt = <800000>;
				regulator-max-microvolt = <3340000>;
				regulator-min-microamp = <1500000>;
				regulator-max-microamp = <3000000>;
				regulator-boot-on;
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_unused_v1: ldo1 {
				regulator-name = "reg_unused_v1";
				regulator-min-microvolt = <600000>;
				regulator-max-microvolt = <1860000>;
				regulator-boot-on;
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_adc_ovdd: ldo2 {
				regulator-name = "reg_adc_ovdd";
				regulator-min-microvolt = <600000>;
				regulator-max-microvolt = <1860000>;
				regulator-boot-on;
				regulator-always-on; /* TODO: Link to ADC instead */
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_pl_bank33: ldo3 {
				regulator-name = "reg_pl_bank33";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <3440000>;
				regulator-boot-on;
				regulator-always-on; /* Enable in overlay instead when PL is in use */
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_pl_bank34: ldo4 {
				regulator-name = "reg_pl_bank34";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <3440000>;
				regulator-boot-on;
				regulator-always-on; /* Enable in overlay instead when PL is in use */
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_unused_v5: ldo5 {
				regulator-name = "reg_unused_v5";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <3600000>;
				regulator-boot-on;
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_unused_v6a: ldo6 {
				regulator-name = "reg_unused_v6a";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <3600000>;
				regulator-boot-on;
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_lis3dh: ldo7 {
				regulator-name = "reg_lis3dh";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <3600000>;
				regulator-boot-on;
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_unused_v8: ldo8 {
				regulator-name = "reg_unused_v8";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <3600000>;
				regulator-boot-on;
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_zynq_adc0: ldo9 {
				regulator-name = "reg_zynq_adc0";
				regulator-min-microvolt = <950000>;
				regulator-max-microvolt = <3600000>;
				regulator-boot-on;
				regulator-always-on; /* We use it for temperature and voltage readings */
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_adc_dac: ldo10 {
				regulator-name = "reg_adc_dac";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <3600000>;
				regulator-boot-on;
				regulator-always-on; /* Work-around to power management issue that causes a phase shift */
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
			reg_pl_bank35: ldo11 {
				regulator-name = "reg_pl_bank35";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <3600000>;
				regulator-boot-on;
				regulator-always-on; /* Enable in overlay instead when PL is in use */
				regulator-state-mem {
					regulator-off-in-suspend;
				};
			};
		};
	};
	// Consumes less than 0.1 W
	accel0: lis3dh@18 {
		compatible = "st,lis3dh-accel";
		reg = <0x18>;
		st,drdy-int-pin = <1>;
		interrupt-parent = <&gpio0>;
		interrupts = <51 IRQ_TYPE_EDGE_RISING>;
		vdd-supply = <&reg_lis3dh>;
	};
	temp0: tmp102@48 {
		compatible = "ti,tmp102";
		reg = <0x48>;
	};
};

&qspi {
	u-boot,dm-pre-reloc;
	status = "okay";
	is-dual = <0>;
	num-cs = <1>;
	flash@0 {
		compatible = "jedec,spi-nor";
		reg = <0x0>;
		spi-tx-bus-width = <1>;
		spi-rx-bus-width = <4>;
		spi-max-frequency = <50000000>;
		#address-cells = <1>;
		#size-cells = <1>;
		partition0@0 {
			label = "firmware";
			reg = <0x0 0x1000000>;
		};
	};
};

&sdhci1 {
	u-boot,dm-pre-reloc;
	status = "okay";
};

&uart1 {
	u-boot,dm-pre-reloc;
	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "otg";
	usb-phy = <&usb_phy0>;
};

&gpio0 {
	emio-gpio-width = <11>;
	gpio-mask-high = <0x0>;
	gpio-mask-low = <0x5600>;
};

&i2c0 {
	status = "okay";
};

&intc {
	num_cpus = <2>;
	num_interrupts = <96>;
};

&amba {
	reg_12v_and_5v_sw: regulator-12v-and-5v-sw {
		compatible = "regulator-fixed";
		regulator-name = "12v-and-5v-sw";
		regulator-min-microvolt = <12000000>;
		regulator-max-microvolt = <12000000>;
		gpio = <&gpio0 60 GPIO_ACTIVE_HIGH>;
		startup-delay-us = <100000>; // Arbitrary
		enable-active-high;
		regulator-state-mem {
			regulator-off-in-suspend;
		};
	};

	reg_osc_vcc_2v5: regulator-osc-vcc-2v5 {
		compatible = "regulator-fixed";
		regulator-name = "osc-vcc-2v5";
		regulator-min-microvolt = <2500000>;
		regulator-max-microvolt = <2500000>;
		gpio = <&gpio0 61 GPIO_ACTIVE_HIGH>;
		startup-delay-us = <100000>; // Arbitrary
		enable-active-high;
		/* This regulator powers the 125 MHz oscillator that is used for
		 * many FPGA-related operations. For now, we choose to simply
		 * enable it indefinitely. With time, we can change this and
		 * instead use runtime power management features to toggle the
		 * regulator on and off as necessary.
		 */
		regulator-always-on;
		regulator-state-mem {
			regulator-off-in-suspend;
		};
	};

	osc_125mhz: oscillator-125mhz {
		compatible = "sitime,sit9121";
		#clock-cells = <0>;
		clock-frequency = <125000000>;
		clock-output-names = "osc125mhz";
		vdd-supply = <&reg_osc_vcc_2v5>;
	};

	stepper_gpio: gpio@41200000 {
		#gpio-cells = <3>;
		clock-names = "s_axi_aclk";
		clocks = <&clkc 15>;
		compatible = "xlnx,axi-gpio-2.0", "xlnx,xps-gpio-1.00.a";
		gpio-controller ;
		reg = <0x41200000 0x10000>;
		xlnx,all-inputs = <0x0>;
		xlnx,all-inputs-2 = <0x0>;
		xlnx,all-outputs = <0x0>;
		xlnx,all-outputs-2 = <0x0>;
		xlnx,dout-default = <0x00000000>;
		xlnx,dout-default-2 = <0x00000000>;
		xlnx,gpio-width = <0xb>;
		xlnx,gpio2-width = <0x20>;
		xlnx,interrupt-present = <0x0>;
		xlnx,is-dual = <0x0>;
		xlnx,tri-default = <0xFFFFFFFF>;
		xlnx,tri-default-2 = <0xFFFFFFFF>;
	};
	stepper_ref_pwm: timer@42820000 {
		#pwm-cells = <2>;
		clock-frequency = <100000000>;
		clock-names = "s_axi_aclk";
		clocks = <&clkc 15>;
		compatible = "xlnx,pwm-xlnx";
		interrupt-names = "interrupt";
		interrupt-parent = <&intc>;
		interrupts = <0 34 4>;
		reg = <0x42820000 0x10000>;
		xlnx,count-width = <0x20>;
		xlnx,gen0-assert = <0x1>;
		xlnx,gen1-assert = <0x1>;
		xlnx,one-timer-only = <0x0>;
		xlnx,trig0-assert = <0x1>;
		xlnx,trig1-assert = <0x1>;
	};
	stepper_step_pwm: timer@42830000 {
		#pwm-cells = <2>;
		clock-frequency = <100000000>;
		clock-names = "s_axi_aclk";
		clocks = <&clkc 15>;
		compatible = "xlnx,pwm-xlnx";
		interrupt-names = "interrupt";
		interrupt-parent = <&intc>;
		interrupts = <0 33 4>;
		reg = <0x42830000 0x10000>;
		xlnx,count-width = <0x20>;
		xlnx,gen0-assert = <0x1>;
		xlnx,gen1-assert = <0x1>;
		xlnx,one-timer-only = <0x0>;
		xlnx,trig0-assert = <0x1>;
		xlnx,trig1-assert = <0x1>;
	};

	stepper_ref_reg: regulator@stepper_step_pwm {
		compatible = "pwm-regulator";
		pwms = <&stepper_ref_pwm 0 10000>; // 100 KHz
		regulator-min-microvolt = <0>;
		regulator-max-microvolt = <3300000>;
		regulator-name = "stepper_ref";
	};

	stepper {
		compatible = "tmc2100";
		cfg-gpios = <&stepper_gpio 0 0 GPIO_ACTIVE_HIGH>,
		            <&stepper_gpio 1 0 GPIO_ACTIVE_HIGH>,
		            <&stepper_gpio 2 0 GPIO_ACTIVE_HIGH>,
		            <&stepper_gpio 3 0 GPIO_ACTIVE_HIGH>,
		            <&stepper_gpio 4 0 GPIO_ACTIVE_HIGH>,
		            <&stepper_gpio 5 0 GPIO_ACTIVE_HIGH>;
		cfg6-enn-gpios = <&stepper_gpio 6 0 GPIO_ACTIVE_LOW>;
		dir-gpios = <&stepper_gpio 7 0 GPIO_ACTIVE_HIGH>;
		index-gpios = <&stepper_gpio 8 0 GPIO_ACTIVE_HIGH>;
		error-gpios = <&stepper_gpio 9 0 GPIO_ACTIVE_HIGH>;
		/* 1 Hz is just so that Linux doesn't complain on initialization. The
		 * actual frequency is set by the driver. */
		pwms = <&stepper_step_pwm 0 1>;
		pwm-names = "step";
		ref-supply = <&stepper_ref_reg>;
		cfg3 = "open"; /* Use external sense resistor. Scale current via ref-voltage. */
		ref-voltage = <1700>; /* Must be between 500 and 2500 mV. */
	};

	/* The liquid sensor (OPB350) consists of:
	 *	 1. An emitter (a PWM-controlled LED)
	 *	 2. A receiver (an ADC-controlled phototransistor)
	 * Note that we only declare nodes for the abovementioned
	 * devices (PWM and ADC) and not for the liquid sensor
	 * itself. This is because the liquid sensor driver is
	 * implemented in a user-space process. The reasons for
	 * this include:
	 *	 1. The PWM is a hwmon-device and therefore doesn't
	 *		have a kernel API for configuring. Consequently,
	 *		we can't configure the PWM from another driver.
	 *	 2. It is faster to develop the driver in user space.
	 */
	i2c2: i2c@41600000 {
		#address-cells = <1>;
		#size-cells = <0>;
		clock-names = "s_axi_aclk"; // TODO: Is this clock name correct? Check what the driver actually expects. This may affect other 's_axi_aclk' nodes.
		clocks = <&clkc 15>;
		compatible = "xlnx,axi-iic-2.0", "xlnx,xps-iic-2.00.a";
		interrupt-names = "iic2intc_irpt";
		interrupt-parent = <&intc>;
		interrupts = <0 31 4>;
		reg = <0x41600000 0x10000>;

		opb350_adc: mcp3021@4d {
			compatible = "microchip,mcp3021";
			reg = <0x4d>;
			reference-voltage-microvolt = <3300000>; /* 3.3 V */
		};
	};
	opb350_pwm: timer@42810000 {
		#pwm-cells = <2>;
		clock-frequency = <100000000>;
		clock-names = "s_axi_aclk";
		clocks = <&clkc 15>;
		compatible = "xlnx,pwm-xlnx";
		interrupt-names = "interrupt";
		interrupt-parent = <&intc>;
		interrupts = <0 35 4>;
		reg = <0x42810000 0x10000>;
		xlnx,count-width = <0x20>;
		xlnx,gen0-assert = <0x1>;
		xlnx,gen1-assert = <0x1>;
		xlnx,one-timer-only = <0x0>;
		xlnx,trig0-assert = <0x1>;
		xlnx,trig1-assert = <0x1>;
	};

	lia_gpio: gpio@41220000 {
		#gpio-cells = <3>;
		clock-names = "s_axi_aclk";
		clocks = <&clkc 15>;
		compatible = "xlnx,axi-gpio-2.0", "xlnx,xps-gpio-1.00.a";
		gpio-controller ;
		reg = <0x41220000 0x10000>;
		xlnx,all-inputs = <0x0>;
		xlnx,all-inputs-2 = <0x0>;
		xlnx,all-outputs = <0x0>;
		xlnx,all-outputs-2 = <0x0>;
		xlnx,dout-default = <0x00000000>;
		xlnx,dout-default-2 = <0x00000000>;
		xlnx,gpio-width = <0x1>;
		xlnx,gpio2-width = <0x20>;
		xlnx,interrupt-present = <0x0>;
		xlnx,is-dual = <0x0>;
		xlnx,tri-default = <0xFFFFFFFF>;
		xlnx,tri-default-2 = <0xFFFFFFFF>;
	};

	adc_qspi: axi_quad_spi@41e10000 {
		#address-cells = <1>;
		#size-cells = <0>;
		bits-per-word = <8>;
		clock-names = "spi_clk", "axi_clk";
		clocks = <&clkc 15>, <&clkc 15>;
		compatible = "xlnx,axi-quad-spi-3.2", "xlnx,xps-spi-2.00.a";
		fifo-size = <16>;
		interrupt-names = "ip2intc_irpt";
		interrupt-parent = <&intc>;
		interrupts = <0 29 1>;
		num-cs = <0x1>;
		reg = <0x41e10000 0x10000>;
		xlnx,num-ss-bits = <0x1>;
		xlnx,spi-mode = <0>;

		tia_adc: ltc2145@0 {
			#io-channel-cells = <1>;
			reg = <0>;
			compatible = "lineartechnology,ltc2145";
			spi-max-frequency = <20000000>;
			clocks = <&osc_125mhz>;
			clock-names = "enc";
			vdd-supply = <&reg_adc_dac>;
			twos-complement;
			// power-control = "channel2-nap";
			// alternate-bit-polarity;
			// output-randomizer;
			// test-pattern = "alternating";
		};
	};

	dac_qspi: axi_quad_spi@41e00000 {
		#address-cells = <1>;
		#size-cells = <0>;
		bits-per-word = <8>;
		clock-names = "spi_clk", "axi_clk";
		clocks = <&clkc 15>, <&clkc 15>;
		compatible = "xlnx,axi-quad-spi-3.2", "xlnx,xps-spi-2.00.a";
		fifo-size = <16>;
		interrupt-names = "ip2intc_irpt";
		interrupt-parent = <&intc>;
		interrupts = <0 30 1>;
		num-cs = <0x1>;
		reg = <0x41e00000 0x10000>;
		xlnx,num-ss-bits = <0x1>;
		xlnx,spi-mode = <0>;

		tia_dac: ad9704@0 {
			#io-channel-cells = <1>;
			compatible = "analogdevices,ad9704";
			reg = <0>;
			spi-max-frequency = <200000000>;
			clocks = <&osc_125mhz>;
			clock-names = "clk";
			vdd-supply = <&reg_adc_dac>;
			twos-complement;
			calibrate-on-init;
		};
	};

	lockamp: lockamp@43c00000 {
		compatible = "sbt,lockamp";
		reg = <0x43c00000 0x10000>;
		reg-names = "lockamp-control";
		reset-gpios = <&lia_gpio 0 0 GPIO_ACTIVE_HIGH>;
		io-channels = <&tia_adc 0>,
		              <&tia_adc 1>,
		              <&tia_dac 0>,
		              <&tia_dac 1>;
		io-channel-names = "adc-site0",
		                   "adc-site1",
		                   "dac-site0",
		                   "dac-site1";
		amp-supply = <&reg_12v_and_5v_sw>;
	};

	flowcell_memory_qspi: axi_quad_spi@41E40000 {
		#address-cells = <1>;
		#size-cells = <0>;
		bits-per-word = <8>;
		clock-names = "spi_clk", "axi_clk";
		clocks = <&clkc 15>, <&clkc 15>;
		compatible = "xlnx,axi-quad-spi-3.2", "xlnx,xps-spi-2.00.a";
		fifo-size = <16>;
		interrupt-names = "ip2intc_irpt";
		interrupt-parent = <&intc>;
		interrupts = <0 36 1>;
		num-cs = <0x1>;
		reg = <0x41E40000 0x10000>;
		xlnx,num-ss-bits = <0x1>;
		xlnx,spi-mode = <0>;

		flowcell_memory: at25sf041@0 {
			compatible = "at25sf041";
			reg = <0x0>;
			spi-max-frequency = <104000000>;
		};
	};

	backlight_pwm: timer@42800000 {
		#pwm-cells = <2>;
		clock-frequency = <100000000>;
		clock-names = "s_axi_aclk";
		clocks = <&clkc 15>;
		compatible = "xlnx,pwm-xlnx";
		interrupt-names = "interrupt";
		interrupt-parent = <&intc>;
		interrupts = <0 32 4>;
		reg = <0x42800000 0x10000>;
		xlnx,count-width = <0x10>;
		xlnx,gen0-assert = <0x1>;
		xlnx,gen1-assert = <0x1>;
		xlnx,one-timer-only = <0x0>;
		xlnx,trig0-assert = <0x1>;
		xlnx,trig1-assert = <0x1>;
	};

	vunreg: regulator-vunreg {
		compatible = "regulator-fixed";
		regulator-name = "vunreg";
	};

	backlight: backlight {
		compatible = "pwm-backlight";
		pwms = <&backlight_pwm 0 20000>;
		pwm-names = "backlight";
		power-supply = <&vunreg>;
		brightness-levels = <0 255>;
		default-brightness-level = <255>;
		num-interpolated-steps = <255>;
	};

	/* HACK: This regulator will be automatically disabled during Linux boot.
	 * This will pull the GPIO down. In turn, this will enable the TIA, which
	 * is what we want */
	reg_tia_a2: regulator-tia-a2 {
		compatible = "regulator-fixed";
		regulator-name = "tia-a2";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		gpio = <&gpio0 64 GPIO_ACTIVE_HIGH>;
		startup-delay-us = <100000>; // Arbitrary
		enable-active-high;
		regulator-state-mem {
			regulator-off-in-suspend;
		};
	};
};
